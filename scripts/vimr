#!/usr/bin/python

import urllib
import subprocess
import argparse
import os
import uuid
import json


class Action:
    ACTIVATE = "activate"
    OPEN = "open"
    NEW_WINDOW = "open-in-new-window"
    SEPARATE_WINDOWS = "open-in-separate-windows"
    NVIM = "nvim"


class QueryParamKey:
    PIPE_PATH = "pipe-path"
    ENV_PATH = "env-path"
    CWD = "cwd"
    FILE = "file"
    NVIM_ARGS = "nvim-args"
    WAIT = "wait"
    LINE = "line"


def wait_for_ui_to_close(pipe_path):
    with open(pipe_path, 'r') as fifo:
        while True:
            if len(fifo.read()) == 0:
                break


def call_open(action, query_params, args):
    if args.wait:
        query_params[QueryParamKey.WAIT] = "true"

    url = "vimr://{0}?{1}".format(action, urllib.urlencode(query_params, True).replace('+', '%20'))

    if args.dry_run:
        print("/usr/bin/open {0}".format(url))
    else:
        subprocess.call(["/usr/bin/open", url])


def abspath(path):
    return os.path.abspath(os.path.expanduser(path))


def vimr_nvim(other_args, nvim_args, query_params):
    query_params[QueryParamKey.CWD] = os.getcwd()

    if nvim_args:
        query_params[QueryParamKey.NVIM_ARGS] = nvim_args

    call_open(Action.NVIM, query_params, other_args)


def vimr(action, args, query_params):
    cwd = os.getcwd()
    if args.cwd is not None:
        cwd = abspath(args.cwd)

    query_params[QueryParamKey.CWD] = cwd

    files = args.file
    if files:
        query_params[QueryParamKey.FILE] = [abspath(f) for f in files]

    call_open(action, query_params, args)


def main(args):
    uuid_str = str(uuid.uuid4())
    pipe_path = "/tmp/com_qvacua_vimr_cli_pipe_{0}".format(uuid_str)
    if os.path.exists(pipe_path):
        os.remove(pipe_path)

    try:
        os.mkfifo(pipe_path, 0o0600)
    except OSError as error:
        print("ERROR: {0}\n"
              "{1} could not be mkfifo'ed.\n"
              "Please go to https://github.com/qvacua/vimr and create an issue.".format(error, pipe_path))
        raise

    query_params = {
        QueryParamKey.PIPE_PATH: pipe_path
    }

    if args.line is not None:
        query_params[QueryParamKey.LINE] = args.line

    if args.cur_env:
        env_file = "/tmp/com_qvacua_vimr_env_{0}".format(uuid_str)
        with open(env_file, "w") as f:
            f.write(json.dumps({k: v for (k, v) in os.environ.items()}))
