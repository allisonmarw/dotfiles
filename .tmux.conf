## mouse options

# Update default binding of `Enter` to also use copy-pipe
#unbind -T vi-copy Enter
# mouse options changed since in 2.1 with some bugs not auto starting
# See: https://github.com/tmux/tmux/issues/145
#if-shell "[[(($( sed 's/tmux\s*//g; s/\([2-9].[1-9][0-9]*\)-.*$/\1/g' <<<'#{version}') > 2.0 ))]]" "\
#    set -g mouse                                                ;\
#    set-window-option -g mouse on                               ;\
#    bind-key -n WheelUpPane \
#        if-shell -F -t= \"#{mouse_any_flag}\" \
#            \"send-keys -M\" \
#            \"if -Ft= '#{pane_in_mode}' \
#                'send-keys -M' \
#                'select-pane -t=; copy-mode -e; send-keys -M'\" ;\
#    bind-key -n WheelDownPane ;\
#    select-pane -t=\\     ;\
#    send-keys -M          ;\
#    "

# mouse options up to 2.0
if-shell "uname | grep -qi Darwin && [[(( $(sed 's/tmux\s*//g; s/\([2-9].[1-9][0-9]*\)-.*$/\1/g' <<< \"#{version}\" ) < 2.0 ))]]" "\
    set-window-option -g mode-mouse on           ;\
    set-window-option -g mouse-select-window on  ;\
    set-window-option -g mouse-select-pane on    ;\
    set-window-option -g mouse-resize-pane on    ;\
    set-window-option -g mouse-utf8 on           ;\
    " \
    "set -g mouse on"
#
# --- Setup Terminal
# Set term to high color
set -g default-terminal "xterm"
set -g default-terminal "xterm-256color"
# set-environment TERM "xterm-256color"
# Native scroll back
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

## Key Bindings
# use vim keybindings in copy mode
set -g @shell_mode 'vi'
setw -g mode-keys vi

# Setup default command zsh with copy/paste on OSX
# Requires brew install reattach-to-user-namespace
## FOR OSX, changes
if-shell "uname | grep -q Darwin" "\
    set-option -g default-command \"reattach-to-user-namespace -l /usr/local/bin/zsh\"  ;\
    " "\
    set-option -g default-command \"reattach-to-user-namespace -l /usr/bin/zsh\"        ;\
    "

if-shell "uname | grep -qi Darwin && [[(($(sed 's/tmux\s*//g; s/\([2-9].[1-9][0-9]*\)-.*$/\1/g' <<< \"#{version}\") > 2.0 )) && (($(sed 's/tmux\s*//g; s/\([2-9].[1-9][0-9]*\)-.*$/\1/g' <<< \"#{version}\") < 2.5 ))]]" "\
        unbind -t vi-copy v ;\
        bind-key -T vi-copy v send-keys -X begin-selection                                    ;\
        bind-key -T vi-copy y copy-pipe \"reattach-to-user-namespace pbcopy\"     ;\
        unbind -t vi-copy Enter                                                 ;\
        bind-key -T vi-copy Enter copy-pipe \"reattach-to-user-namespace pbcopy\" ;\
    "

if-shell "uname | grep -qi Darwin && [[(( $(sed 's/tmux\s*//g; s/\([2-9].[1-9][0-9]*\)-.*$/\1/g' <<< \"#{version}\" ) > 2.5 ))]]" "\
        bind-key -T vi-copy v send-keys -X begin-selection                   ;\
        bind-key -T vi-copy y send-keys -X copy-pipe \"reattach-to-user-namespace pbcopy\" ;\
        bind-key -T copy-mode-vi y send-keys -X copy-pipe \"reattach-to-user-namespace pbcopy\" ;\
        unbind -T copy-mode-vi v                                ;\
        bind-key -T copy-mode-vi v send-keys -X begin-selection ;\
        unbind -T copy-mode Enter                               ;\
        bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel \"reattach-to-user-namespace pbcopy\" "

# if-shell "uname | grep -q Darwin && [[ ! $(tmux -V|cut -d' ' -f2) -ge 2.0 ]]" "\
#  source-file "$HOME/.dotfiles/tmux/tmux.conf-osx"     					;\
#  "
if-shell "uname | grep -q Linux" "\
    source-file \"$HOME/.dotfiles/tmux/tmux.conf-linux\"     ;\
    "

## Powerline

#set -g status-left '#(${POWERLINE_COMMAND} tmux left)'
#set -g status-right '#(${POWERLINE_COMMAND} tmux right)'
#set-environment -g POWERLINE_COMMAND _powerline_set_prompt

if-shell 'env "$POWERLINE_CONFIG_COMMAND" tmux setup' '' 'run-shell "powerline-config tmux setup"'
run-shell "powerline-daemon -q"
source-file "/opt/homebrew/lib/python3.5/site-packages/powerline/bindings/tmux/powerline_tmux_2.1_plus.conf"

if-shell "uname | grep -qi Darwin && [[(( $(sed 's/tmux\s*//g; s/\([2-9].[1-9][0-9]*\)-.*$/\1/g' <<< \"#{version}\" ) > 2.1 )) && (( $(sed 's/tmux\s*//g; s/\([2-9].[1-9][0-9]*\)-.*$/\1/g' <<< \"#{version}\" ) < 2.2 ))]]" "\
     bind-key -T vi-copy WheelUpPane send-key -X half-page-up ;\
     bind-key -T vi-copy WheelDownPane send-key -X half-page-down ;\
     set-window-option -g utf8 on ;\
     set -g status-utf8 on"

# Status bar setup
set -g status on
set -g status-interval 2
set -g status-left-length 20
set -g status-right-length 150
set -g status-style "fg=blue,bg=#000000"

## Powerline
#set -g status-left '#(${POWERLINE_COMMAND} tmux left)'
#set -g status-right '#(${POWERLINE_COMMAND} tmux right)'
#run-shell "powerline-daemon -q"
#set-environment -g POWERLINE_COMMAND _powerline_set_prompt
## source-file "$HOME/repos/github.powerline-status/powerline/bindings/tmux/powerline.conf"
# source-file "$HOME/repos/github.powerline-status/powerline/bindings/tmux/powerline_tmux_1.9_plus.conf"
# if-shell 'env "$POWERLINE_CONFIG_COMMAND" tmux setup' '' 'run-shell "powerline-config tmux setup"'
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# Easy to search file/sha/url above
set -g @plugin 'tmux-plugins/tmux-copycat'
# Easy to open link / files from tmux
set -g @plugin 'tmux-plugins/tmux-open'
# Basic tmux settings everyone can agree on
set -g @plugin 'tmux-plugins/tmux-sensible'
# Easy to paste selected text
set -g @plugin 'tmux-plugins/tmux-yank'
# Easy to switch between Vim and Tmux panes
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'seebi/tmux-colors-solarized'
#set -g @colors-solarized '256'
set -g @colors-solarized 'dark'
#set -g @colors-solarized 'light
# Resurrect tmux sessions
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
# Auto restore saved session
set -g @continuum-restore 'on'
set -g @ressurect-stratagy-vim 'session'
set -g @ressurect-processes 'ssh'


# Sessionist
#   prefix + g - prompts for session name and switches to it. Performs 'kind-of' name completion.
#   prefix + C (shift + c) - prompt for creating a new session by name.
#   prefix + X (shift + x) - kill current session without detaching tmux.
#   prefix + S (shift + s) - switches to the last session.
#   prefix + @ - promote current pane into a new session.
set -g @plugin 'tmux-plugins/tmux-sessionist'
# Pain Control Plugin
#   prefix + h and prefix + C-h  select pane on the left
#   prefix + j || prefix + C-j select pane below the current one
#   prefix + k || prefix + C-k select pane above
#   prefix + l || prefix + C-l select pane on the right#
#   prefix + H resize current pane 5 cells to the left
#   prefix + J resize 5 cells in the up direction
#   prefix + K resize 5 cells in the down direction
#   prefix + L resize 5 cells to the right
#   prefix + | split current pane horizontally
#   prefix + - split current pane vertically
set -g @plugin 'tmux-plugins/tmux-pain-control'

# Controls
# remap prefix to Control + a
unbind C-b
set -g prefix C-a
if-shell "uname | grep -qi Darwin && [[(( $(sed 's/tmux\s*//g; s/\([2-9].[1-9][0-9]*\)-.*$/\1/g' <<< \"#{version}\" ) <= 2.5 ))]]" "\
    bind-key -n C-b send-prefix     ;\
    bind-key C-a send-keys \"C-a\"  ;\
    "

unbind C-b
bind C-b set-window-option synchronize-panes

unbind C-d
bind C-d confirm-before -p "kill-pane #P (y/n)" kill-pane

# prefix-x zoompane
unbind x
bind x resize-pane -Z

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf

# Todo: Make this smarter for project syntax
#unbind c
#bind-key -T prefix c if-shell '[[ "$(tmux display-message -p "#S")" =~ (^W[0-9]+) && -d "$HOME/project/$match[1]" ]] || mkdir -pv "$HOME/project/$match[1]' 'new-window -c "#{pane_current_path}"' 'new-window -c "$HOME/project/$match[1]"'

## Bring back clear screen under tmux prefix
# This is used by tmux pane control
# bind c-l send-keys 'C-l'

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Few of my specific settings for tmux
set-option -g bell-action any
set-option -g prefix2 ^A
set-option -g base-index 1
set-option -g pane-base-index 1
set-option -g renumber-windows on


# Stop renameing windows
set-window-option -g automatic-rename on
set-window-option -g allow-rename on
# Windows are displayed only as small as the smalled Active screen
setw -g aggressive-resize on

# Options available only after tmux 2.0
#run-shell '[[ "$(tmux -V)" == tmux\ 1* ]] || tmux set-option -g message-command-style bg=colour241,fg=white'
#run-shell '[[ "$(tmux -V)" == tmux\ 1* ]] || tmux set-option -g message-style bg=colour241,fg=white'
#run-shell '[[ -f ~/.dotfiles/tmux/helpers/powerline-helper.zsh ]] && ~/.dotfiles/tmux/helpers/powerline-helper.zsh'

 # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
