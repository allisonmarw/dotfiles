#!/bin/zsh
#set -x
: ${DEBUG:=N}
: ${TIME_FMT:="+%F %H:%M.%s"}
[[ ${TIME_FMT} ]] && date "${TIME_FMT}" &> /dev/null || TIME_FMT="-u"

: ${LOGGING:='logger'}; 
#### LOGGING STUB
if ! source ~/bin/logging-stub.zsh; then
	log() {
		local level="${1}"
		shift
		local message=${@}
		[[ ${DEBUG} =~ ^[Yy]$ ]] && printf "Using logger \"%s\"\n" ${LOGGING:l}
		if [[ "${LOGGING:l}" == "logger" ]]; then
			logger -s -p "${level:l}" "${message:u}"
		elif [[ "${LOGGING:l}" == "printf" ]]; then
			printf '(%-10s) [%s] ' "$(date "${TIME_FMT}")" "${level:u}" >&2
			echo "${message:C}" >&2
		else:
			logger -p "${level:u}" "${message}"
		fi
		return 0
	}
	pipelog() {
		local level="${1}"
		local message

		while read -rs message; do
			log $level $message
		done

		return 0
	}

	alert() { log alert "${@}"; }
	crit() { log crit "${@}"; }
	error() { log error "${@}"; }
	warn() { log warn "${@}"; }
	notice() { log notice "${@}"; }
	info() { log info "${@}"; }
	debug() { [[ ${DEBUG:-N} =~ ^[Yy]$ ]] && log debug "${@}"; }

	fatal() { log error "${@}"; exit 255; }
	debug "Using Stubbed logging"
fi

##### Globals and Defauts
IMAGETYPELIST='~/.config/hosttype.list'

RACK_RE='(^[rR]?[0-9][0-9]*)'
RACK_RANGE_RE='(~r?[0-9]+$|$)'

PANE_RE='(^)([0-9][0-9]*$)'
PANE_RANGE_START_RE='^(~p?[0-9]+|$)'
PANE_START_RE='(^[0-9][0-9]*|^)'
PANE_RANGE_RE='(~p?[0-9]+$|$)'

CLUSTER_RE='(^[0-9]+[a-z]?|av1)\.([a-z]{2,3}[abc0-9]?)'
DOMAIN_RE='gaikai.(org|net)'

if which tmux &> /dev/null; then
get_pane() {
    declare -a _TMUX_TTY_LIST
    _TMUX_PANE_TYPE="$(tmux display-message -p "#W")"
    export _TMUX_PANE_TYPE
    _TMUX_TTY_LIST+=( $(tmux lsp -F '#{pane_index}:#{pane_tty}') )
    export _TMUX_TTY_LIST
    _TMUX_MY_TTY="$(tmux display-message -p '#{pane_tty}')"
    export _TMUX_TTY_LIST
    debug "IMAGE_TYPE \"${_TMUX_IMAGE_TYPE}\" LIST: \"$( grep --color '$\|'"${_TTY:-$(tty)$}"'\|'"${_TMUX_MY_TTY//\'/$q_mid}" <<< "${_TMUX_TTY_LIST}")\""
    PANE_NUMBER="$(for _TTY in ${_TMUX_TTY_LIST[*]}; do
                    if [[ "${_TTY}" =~ "$(tty)" ]]; then
                        printf '%s' "${_TTY}" | cut -d':' -f1;
#                    elif [[ "${_TTY}" =~ "${_TMUX_MY_TTY}"$  ]]; then
#                        printf '%s' ${_TTY} | cut -d':' -f1;
                    fi; done | head -1)"
    echo "${PANE_NUMBER}"
}
fi
[[  -z ${PANE_NUMBER:=$(get_pane)} ]] && warn "Pane number could not be discovered, using 1"
PANE_NUMBER=${PANE_NUMBER:-1}
CLUSTERTYPE=''

_RSYNC_BIN="$(which rsync 2>/dev/null)"
_RSYNC_OPTS="${RSYNC_OPTS:-"-aL"}"

# ZONEID=''
RETRY=10
#SSH_OPTS=-A -vv

: ${CLUSTERID:='03.snaa'}
: ${STREAMING_CLUSTERID:='01.snaa'}
: ${DOMAIN:='gaikai.org'}
declare -a _REMOTE_CONF
[[ ${REMOTE_CONF} ]] && _REMOTE_CONF+=${REMOTE_CONF}

# Traps
wait_to_clean () {
	trap SIGINT EXIT # clear trap
	if [[ ${1:-0} -gt 0 && ${1:-9} -lt 255 ]] && ! ${PRINT_ONLY:-false} ; then
		error "Unable to Connect. Press ^D or ^C to continue"
		cat
	fi
	info "Exiting..."
	exit ${1:-0}
}
trap 'wait_to_clean $?' EXIT

# Trap C-c
control_c () {
	warn "Caught Break. Exiting at user request."
	trap EXIT
	if [[ ${1:-0} == 1 ]]; then
		info "Exiting..."
		exit 0
	fi
	echo >&2 # blank
}
trap 'control_c 1' SIGINT

### Usage
usage () {
	ERROR=${1}
	if [[ -n ${ERROR} ]]; then
		printf '%s\n' "${ERROR}" >&2
	fi
	printf '%s: [-n] [-r rack] [-c <cluster_id>] [-z <zone_id>] [-p PANE_NUM] [-R RETRY] [-H|-V] [-l] IMAGETYPE\n' "$(basename "${0}")"
	printf '\t\t%-15s\t:\t%-12s\n' '-P --pretend' 'Only print hostname' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-r --rack' 'Rack ID use syntax [r]X~Y where x is the starting rack number and Y is number of racks to interate through' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-c --cluster' 'Cluster ID' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-z --zone' 'Zone Name' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-p --pane' 'Manual Pane ID' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-R --retry' 'Number of retries [Default: 5]' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-H --horizontal' 'Horizonetal Rack config. (Increment rack by pane_id) [Default]' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-V --vertical' 'Horizonetal Rack config. (Increment host by pane_id)' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-O --override' 'Override config. (use host-type literally)' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-S --streaming' 'Use streaming cluster' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-R --retry' 'Number of retries [Default: 5]' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-l --list' 'list default (and then exit)' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-k --keep-alive' 'Retry forever (same as -R 0)' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-s --silent' 'Silence logging' >&2
	printf '\t\t%-15s\t:\t%-12s\n' '-i --include' 'push files to remote before connection' >&2
	exit 255
}

while getopts ":nshDPHVOSlkz:c:r:p:R:i:" opt; do
	case $opt in
	s)
		LOGGING=""
		;;
	l)
		#TODO Print defaults here. Change vars to defaults
		PRINT_L=Y
		;;
	k)
		info "Setting keep alive"
		RETRY=0
		KEEP_ALIVE=Y
		;;
	H)
		debug "Set cluster type horizontal!"
		;;
	V)
		debug "Set cluster type Vertical!"
		CLUSTERTYPE="V"
		# RACKID needs to be set for VERTICAL
		# RACKID=""
	;;
	O)
		debug "Overriding cluster"
		CLUSTERTYPE="O"
	;;
	S)
		[[ ${STREAMING} =~ ^[Nn]$ ]] && usage "Please use -S or -c. These options are not compatable"
		[[ ${STREAMING_CLUSTERID} =~ ${CLUSTER_RE} ]] || usage "Cluster ID is not valide for STREAMING_CLUSTERID: \"${STREAMING_CLUSTERID}\""
		STREAMING=Y
	;;
	z)
		usage "Using Zones is Currently unsupported"
	;;
	c)
		[[ ${STREAMING:=N} =~ ^[Yy]$ ]] && usage "Please use -S or -c. These options are not compatable"
		[[ ${OPTARG} ]] || usage "Please provide a ClusterID"
		CLUSTERID="${OPTARG}"
		[[ ${CLUSTERID} =~ ${CLUSTER_RE} ]] || usage "Unable to use CLUSTERID: \"${CLUSTERID}\". Please use ##[ab].abc[ab]";
	;;
	r)
		debug "Setting RACK number ${OPTARG}"
		[[ ${OPTARG} =~ ${RACK_RE}${RACK_RANGE_RE} ]] || usage "Unable to use -r OPTARG: \"${OPTARG}\" needs to be a number or range(\"${RACK_RE}${RACK_RANGE_RE}\").";
		# Bashrematch
		RACKNUM="${BASH_REMATCH[1]}"
		[[ ${RACKNUM:=${match[1]}} ]] || usage "Unable to use RACKNUM: \"${RACKNUM}\""
		RACK_TYPE="${BASH_REMATCH[2]}"
		# ZSH?
		[[ ${RACK_TYPE:=${match[2]}} =~ ${RACK_RANGE_RE} ]] || usage "Unable to use RACK_TYPE \"${RACK_TYPE}\"" 
		[[ ${RACKNUM} =~ ${RACK_RE}$ && ${RACK_TYPE} =~ ${RACK_RANGE_RE} ]] || usage "Unable to gen rack id RACKNUM: \"${RACKNUM}\" RACK_TYPE: \"${RACK_TYPE}\""
	;;
	d)
		[[ ${OPTARG} ]] || usage "Please provice a domain"
		[[ ${OPTARG} =~ ${DOMAIN_RE} ]] || usage "Please provide the correct domain"
		debug "Setting domain to \"${OPTARG}\""
		DOMAIN=${OPTARG}
	;;
	p)
		# [[ ${OPTARG} =~ ${PANE_RANGE_RE}(~?p?[0-9]+$) ]] || usage "Unable to use pane number \"${OPTARG}\" \"${PANE_RANGE_RE}\""
		info "Overriding PANEID: \"${PANEID}\" -> OPTARG: \"${OPTARG}\", needs to be a number or range. \"${PANE_START_RE}${PANE_RANGE_RE}\""
		# Check optargs
		[[ ${OPTARG} =~ ${PANE_START_RE}${PANE_RANGE_RE} ]] || usage "Unable to use -p OPTARG: \"${OPTARG}\", needs to be a number or range. \"${PANE_START_RE}${PANE_RANGE_RE}\""
		# Bashrematch and zsh match
		PANEID="${BASH_REMATCH[1]}"
		PANE_TYPE="${BASH_REMATCH[2]}"
		: ${PANE_TYPE:=${match[2]}}
		[[ ${PANEID:=${match[1]}} || ${PANE_TYPE} ]] || usage "Unable to set PANEID \"${PANEID}\" with PANE_TYPE: \"${PANE_TYPE}\"" 
		[[ ${PANE_TYPE} =~ ${PANE_RANGE_RE} ]] || error "Unable to set pane type \"PANE_TYPE\" \"${BASHREMATCH[1]}${match[1]}\" \"${BASHREMATCH[2]}${match[2]}\""
		if ! [[ ${PANEID} =~ ${PANE_START_RE} && ${PANE_TYPE} =~ ${PANE_RANGE_RE} ]]; then
			 debug "[[ ${PANEID} =~ ${PANE_START_RE} && ${PANE_TYPE} =~ ${PANE_RANGE_RE} ]]"
			 usage "Unable to gen pane id PANEID: \"${PANEID}\" PANE_TYPE: \"${PANE_TYPE}\""
		fi
		debug "Overriding PANEID: \"${PANEID}\" PANE_TYPE: \"${PANE_TYPE}\""
	;;
	R)
		[[ ${OPTARG} =~ ^[0-9]+$ ]] || usage "Unable to get retry count \"${OPTARG}\""
		RETRY="${OPTARG}"
		if [[ "${RETRY}" -gt 100 ]]; then
			usage "Retry amount must be less than 100. For forever, use 0"
		fi
	;;
	h)
		usage
	;;
	D)
		info "Using debug output"
		DEBUG=Y
	;;
	P)
		info "Pretending (print only)"
		PRINT_ONLY=true
	;;
	i)
		info "Checking for \"${OPTARG}\" to include"
		local INCLUDE_FILE="$(/usr/local/bin/realpath "${OPTARG}")"
		if [[ ${INCLUDE_FILE} ]]; then
			debug "Including files ${INCLUDE_FILE}"
			_REMOTE_CONF+=${INCLUDE_FILE}
			debug "All files to include \"${_REMOTE_CONF}\""
		else
			info "File \"${INCLUDE_FILE}\" does not exist and therefore cannot be included"
		fi
	;;
	--)
		break
		;;
	\?)
		usage "Invalid option: -$OPTARG"
		;;
	esac
	SSH_PASSTHROUGH=${@}
done

shift $((OPTIND-1))

# TODO Pass through args for ssh after '--', requires rewrite/remove "getopts"
# [ "$1" = "--" ] && shift

[[ ${PANE_NUMBER} =~ ${PANE_RE} && ${PANE_TYPE} =~ ${PANE_RANGE_START_RE} ]] || usage "Sanity check failed for PANE_NUMBER: \"${PANE_NUMBER}\" PANE_TYPE: \"${PANE_TYPE}\""

# IN PANE_ID ^r\d$|^\d$ : PANE_TYPE:^~$|^~r$|^r$|^$
if [[ ${PANE_TYPE} =~ ~p?([0-9]+$) ]]; then
	PANE_MAX=${BASH_REMATCH[1]#~} # TODO get this data from ([0-9]+)~(r[0-9]+)
	if ! [[ ${PANE_MAX:=${match[1]}} =~ [1-9][0-9]* ]]; then
		warn "Could not match pane start \"${PANE_MAX}\""
		PANE_MAX=1
	fi
	PANE_RANGE=$(( PANE_MAX ))
	debug "PANE_NUMBER: \"${PANE_NUMBER}\" PANE_MAX: \"${PANE_MAX}\" \" ( $PANE_NUMBER - 1 ) % $PANE_RANGE + 1 \""
	PANEID="$(( ( PANE_NUMBER - 1 ) % PANE_RANGE + 1 ))"
elif [[ -z ${PANE_TYPE} && -z ${PANEID} ]]; then
	PANEID="${PANE_NUMBER}"
elif [[ ${PANEID} =~ ${PANE_RE} ]]; then
	:
else
	error "Invalid Pane Type: \"${PANE_TYPE}\" or PANE ID: \"${PANEID}\". How did you even do that?"
	exit 1
fi
debug "Final PANEID: \"${PANEID}\""

[[ ${PANEID} =~ ${PANE_RE} ]] || usage "Invalid PANEID: \"${PANEID}\""

# RACK ID
if [[ "${CLUSTERTYPE:="H"}" == "H" ]]; then
	[[ ${RACKNUM} ]] && RACKID=${RACKNUM} || RACKID="$((PANEID + 1 ))"
	[[ ${RACKID} =~ ^[1-9][0-9]*$ ]] || usage "Unable to use RACKID: \"${RACKID}\" needs to be a number greater than 0"
elif [[ "${CLUSTERTYPE:="H"}" =~ ^[OV]$ ]]; then
	[[ ${RACKNUM} ]] && RACKID=${RACKNUM} || usage "Vertical and override clustertypes require -r"
	[[ ${RACKID} =~ ^[1-9][0-9]*$ ]] || usage "Unable to use RACKID: \"${RACKID}\" needs to be a number greater than 0"
fi


# IN RACK_ID ^r\d$|^\d$ : RACK_TYPE:^~$|^~r$|^r$|^$
if [[ ${RACK_TYPE} =~ ~r?([0-9]+$) ]]; then
	RACK_RANGE=${BASH_REMATCH[1]}
	[[ ${RACK_RANGE:=${match[1]}} ]] || usage "Unable to find rack range"
	# RANGE SET RANGE
	RACK_START=${RACKID#r} # TODO get this data from ([0-9]+)~(r[0-9]+)
	if ! [[ ${RACK_START} =~ ([0-9]+$) ]]; then
		warn "Could not match Rack start \"${RACK_START}\""
		RACK_START=1
	fi
	RACK_RANGE=$(( RACK_RANGE - RACKID + 1))
	debug "PANEID: \"${PANEID}\" RACKNUM: \"${RACKNUM#r}\" RACK_START: \"${RACK_START}\" RACK_RANGE: \"${RACK_RANGE}\""
	[[ ${RACK_RANGE} == 0 ]] && RACK_RANGE=1
	[[ ${RACK_RANGE} =~ ^[1-9]+$ ]] || usage "Could not determine rack range from RACK_START: \"${RACK_START}\" RACKID: \"${RACKID}\""
	debug " ( $PANEID - 1 ) % $RACK_RANGE + $RACK_START "
	RACK="r$(( ( PANEID - 1) % RACK_RANGE + RACK_START ))"
elif [[ ${RACK_TYPE} =~ ^r?$ && -n ${RACKID} ]]; then

	RACK="r${RACKID}"
else
	error "Invalid Rack Type: \"${RACK_TYPE}\". How did you even do that?"
	exit 1
fi

# Final rack check
RACK=${RACK}
debug "RACK \"$RACK\""
if ! [[ ${RACK} =~ ${RACK_RE}$ ]]; then
	error "Invalid rack name: \"${RACK}\""
	exit 1
fi

if [[ ${PRINT_L:-N} =~ ^[Yy]$ ]]; then
	if [[ ${STREAMING} =~ ^[Yy]$ ]]; then
		STREAMING_CLUSTERID_SELECT="*" 
	else
		CLUSTERID_SELECT="*"
	fi
	printf "PANEID: %20s\n%sCLUSTERID: %20s\n%sSTREAMING_CLUSTERID: %10s\nRACKID: %20s\n" "${PANEID}" "${CLUSTERID_SELECT}" "${CLUSTERID}" "${STREAMING_CLUSTERID_SELECT}" "${STREAMING_CLUSTERID}" "${RACKID}" >&2
	exit 0
fi

# Only thing left is host 
#if (($# == 0)); then
#	usage "Please provide a host type"
#elif (( $# == 1 )); then
#	IMAGETYPE=${1}
#fi
if which tmux &> /dev/null; then
	TMUX_IMAGE_TYPE="$(tmux display-message -p "#{pane_title}")"
fi
IMAGETYPE=${1}
[[ ${IMAGETYPE} && ${TMUX_IMAGE_TYPE} ]] || IMAGETYPE="${TMUX_IMAGE_TYPE}"
[[ ${IMAGETYPE} ]] || usage "Please provide and image type..."


[[ -z "${IMAGETYPE}" ]] && usage "Please provide a host type"

if [[ "${CLUSTERTYPE}" =~ ^[HV]$ ]]; then
	REMOTE_HOST="${IMAGETYPE}${PANEID}"
elif [[ "${CLUSTERTYPE}" == "O" ]]; then
	REMOTE_HOST="${IMAGETYPE}"
fi

if [[ ${STREAMING} =~ ^[Yy]$ ]]; then
	REMOTE_HOST="${REMOTE_HOST}.${RACK}.${STREAMING_CLUSTERID}.${DOMAIN}"
else
	REMOTE_HOST="${REMOTE_HOST}.${RACK}.${CLUSTERID}.${DOMAIN}"
fi

info "Creating hostname for to \"${IMAGETYPE}\" \"${RACK}\" \"${CLUSTERID}\" \"${DOMAIN}\""

set -o pipefail
[[ -z ${REMOTE_HOST} ]] && usage "REMOTE_HOST was not generated correctly"
if ${PRINT_ONLY:=false}; then
	echo ${REMOTE_HOST}
	exit 0
fi

unset RETRY_COUNT
retry () {
	: ${RETRY_COUNT:=0}
	if [[ $RETRY == 0 || $RETRY_COUNT -lt $RETRY ]]; then
		: $(( RETRY_COUNT = RETRY_COUNT + 1 ))
		return 0
	else
		return 1
	fi
}
pre_conn() {
	# debug "Copying files in array _REMOTE_CONF \"${_REMOTE_CON}\""
	command -v ${RSYNC_BIN:="rsync"} &>/dev/null || which ${RSYNC_BIN} &>/dev/null || warn "Unable to sync files: Could not find command:\"${RSYNC_BIN}\""
	[[ ${DEBUG:-N} =~ ^[Yy]$ ]] && RSYNC_OPT="${RSYNC_OPT} -v --progress"
	for file in ${_REMOTE_CONF[@]}; do
		[[ ${_RSYNC_OPTS} ]] || warn "No rsync options set. Using default options \"-av\""
		if [[ -d ${file} ]]; then
			debug "Copying directory \"${file}\" to ${REMOTE_HOST}"
			"${_RSYNC_BIN}" ${_RSYNC_OPTS:-"-av"} "${file%/}" "${REMOTE_HOST}:" || error "Error while copying directory \"${file%/}\""

		elif [[ -f ${file} ]]; then
			debug "Copying file \"${file}\""
			"${_RSYNC_BIN}" ${_RSYNC_OPTS:-"-av"} "${file}" "${REMOTE_HOST}:" || error "Error while copying file \"${file}\""
	fi
	done
	debug "All files copied to \"${REMOTE_HOST}\""
}

connection_test () {
		printf "Waiting to connect \"%s\" (Attempt: %s/%s)...\n" "${REMOTE_HOST}" "${RETRY_COUNT}" "${RETRY}" >&2
		ping -W 10 -c 5 "${REMOTE_HOST}" | sed -n '/ping statistics ---/,/$/{p;}'
		return ${?}
}


go () {
	while retry; do
		connection_test
		PING_RET=${?}
		case ${PING_RET:=0} in
			0)
				# good
				unset SSH_RET
				[[ ${TMUX} ]] && command -v tmux &>/dev/null && tmux rename-window "${IMAGETYPE}"
				[[ ${#_REMOTE_CONF[@]} -gt 0 ]] && pre_conn
					ssh ${SSH_OPTS} "${REMOTE_HOST}"
				case ${SSH_RET=${?}} in
					255)
						warn "SSH Closed by remote hosts"
						if [[ ${KEEP_ALIVE:-N} =~ ^[Yy]$ ]]; then
							continue
						fi
						break
					;;
					130)
						debug "SSH Closed by client"
						break
					;;
					*)
						debug "SSH Returned with code ${SSH_RET}"
						break
					;;
				esac

				;;
			2)
				# failed with 100% loss
				continue
				;;
			68)
				# Couldnt resolve
				error "Not a valid hostname"
				RET=1
				break
				;;
			*)
				warn "Failed to ssh"
				RET=255
		esac
	done
}

[[ ${PRINT_ONLY:-false} == "true" ]] || go
exit ${RET:-"0"}
